#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];
    
    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }
    
    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }
    
    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }
    
    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

struct VP
{
    float4x4 projection;
    float4x4 view;
    float4x4 invViewProj;
};

constant spvUnsafeArray<float3, 64> _464 = spvUnsafeArray<float3, 64>({ float3(-0.0622651018202304840087890625, -0.05167829990386962890625, 0.0374449007213115692138671875), float3(0.0302175991237163543701171875, -0.0200379006564617156982421875, 0.01662690006196498870849609375), float3(-0.0390986017882823944091796875, 0.0401570983231067657470703125, 0.007383559830486774444580078125), float3(0.009839450009167194366455078125, 0.037042200565338134765625, 0.0354139991104602813720703125), float3(0.052320800721645355224609375, 0.068775497376918792724609375, 0.0504414997994899749755859375), float3(-0.028015099465847015380859375, -0.010210500098764896392822265625, 0.06209909915924072265625), float3(0.060226701200008392333984375, 0.0692259967327117919921875, 0.01235279999673366546630859375), float3(0.02859270013868808746337890625, -0.014475700445473194122314453125, 0.0328993014991283416748046875), float3(-0.06259019672870635986328125, 0.00486651994287967681884765625, 0.064606897532939910888671875), float3(0.0058893398381769657135009765625, 0.001378530054353177547454833984375, 0.00922296009957790374755859375), float3(0.034584499895572662353515625, -0.02139819972217082977294921875, 0.094694197177886962890625), float3(-0.0006720679812133312225341796875, 0.0240708999335765838623046875, 0.0031610499136149883270263671875), float3(-0.01666470058262348175048828125, 0.01690440066158771514892578125, 0.00253134989179670810699462890625), float3(0.01270630024373531341552734375, 0.008617189712822437286376953125, 0.0402492992579936981201171875), float3(-0.01859479956328868865966796875, -0.026761300861835479736328125, 0.13817499577999114990234375), float3(0.00785665027797222137451171875, -0.0342657007277011871337890625, 0.0356098003685474395751953125), float3(-0.00279815006069839000701904296875, -0.026817500591278076171875, 0.0040752398781478404998779296875), float3(-0.008393459953367710113525390625, -0.066703498363494873046875, 0.0363405011594295501708984375), float3(0.0045841899700462818145751953125, 0.0101012997329235076904296875, 0.00270968000404536724090576171875), float3(0.0271658003330230712890625, -0.00899945013225078582763671875, 0.00779215991497039794921875), float3(0.111280001699924468994140625, 0.119108997285366058349609375, 0.013779900036752223968505859375), float3(0.0379422008991241455078125, 0.053585000336170196533203125, 0.095288597047328948974609375), float3(-0.073107503354549407958984375, -0.051304601132869720458984375, 0.083656497299671173095703125), float3(0.0495464988052845001220703125, -0.028514899313449859619140625, 0.012363200075924396514892578125), float3(-0.028116799890995025634765625, -0.10963000357151031494140625, 0.0879172980785369873046875), float3(-0.16427199542522430419921875, -0.15279899537563323974609375, 0.01946569979190826416015625), float3(0.013870500028133392333984375, -0.15612499415874481201171875, 0.093862496316432952880859375), float3(-0.0235613994300365447998046875, -0.0525997988879680633544921875, 0.005530389957129955291748046875), float3(-0.15712200105190277099609375, 0.03822679817676544189453125, 0.03075109981000423431396484375), float3(-0.15470699965953826904296875, 0.09286390244960784912109375, 0.057226099073886871337890625), float3(-0.173391997814178466796875, -0.12337599694728851318359375, 0.069154202938079833984375), float3(-0.056388698518276214599609375, 0.17183999717235565185546875, 0.149004995822906494140625), float3(0.0678440034389495849609375, -0.06374169886112213134765625, 0.14591300487518310546875), float3(0.1403940021991729736328125, -0.17646099627017974853515625, 0.146531999111175537109375), float3(0.17502899467945098876953125, 0.15959300100803375244140625, 0.1515789926052093505859375), float3(0.0270447991788387298583984375, -0.18411900103092193603515625, 0.02869500033557415008544921875), float3(0.12571899592876434326171875, -0.098348796367645263671875, 0.144692003726959228515625), float3(0.075289897620677947998046875, 0.0009050010121427476406097412109375, 0.0988444983959197998046875), float3(0.208784997463226318359375, 0.343313992023468017578125, 0.0226371996104717254638671875), float3(-0.087763600051403045654296875, -0.0162506997585296630859375, 0.0969600975513458251953125), float3(0.2435790002346038818359375, -0.2589519917964935302734375, 0.0688579976558685302734375), float3(-0.0026463200338184833526611328125, 0.020114600658416748046875, 0.012759500183165073394775390625), float3(0.0341592989861965179443359375, -0.02601850032806396484375, 0.027611799538135528564453125), float3(0.258152008056640625, 0.02000240050256252288818359375, 0.05138219892978668212890625), float3(0.1284399926662445068359375, -0.06514610350131988525390625, 0.084316797554492950439453125), float3(0.1564610004425048828125, 0.3607060015201568603515625, 0.076668597757816314697265625), float3(-0.0081276595592498779296875, 0.0267197005450725555419921875, 0.001007360056973993778228759765625), float3(0.02164239995181560516357421875, 0.0041351201944053173065185546875, 0.02798409946262836456298828125), float3(-0.4782139956951141357421875, 0.345468997955322265625, 0.066038496792316436767578125), float3(-0.0930429995059967041015625, -0.13237600028514862060546875, 0.19711999595165252685546875), float3(0.2851119935512542724609375, 0.093766503036022186279296875, 0.3872539997100830078125), float3(-0.012383299879729747772216796875, 0.01650290004909038543701171875, 0.01322109997272491455078125), float3(0.0215764008462429046630859375, 0.4191969931125640869140625, 0.4661079943180084228515625), float3(0.2266699969768524169921875, -0.302599012851715087890625, 0.14933000504970550537109375), float3(-0.1917819976806640625, -0.1012080013751983642578125, 0.1959500014781951904296875), float3(-0.1096419990062713623046875, -0.01564319990575313568115234375, 0.085868097841739654541015625), float3(0.0490018017590045928955078125, -0.255870997905731201171875, 0.40524399280548095703125), float3(0.074717998504638671875, -0.07107619941234588623046875, 0.050888799130916595458984375), float3(-0.21660499274730682373046875, 0.22252799570560455322265625, 0.596920013427734375), float3(-0.19387100636959075927734375, -0.3374330103397369384765625, 0.12161900103092193603515625), float3(-0.51797497272491455078125, -0.634931981563568115234375, 0.3360640108585357666015625), float3(-0.2917819917201995849609375, 0.2881959974765777587890625, 0.66057598590850830078125), float3(-0.008852739818394184112548828125, -0.17962799966335296630859375, 0.0218339003622531890869140625), float3(0.1612530052661895751953125, -0.3839839994907379150390625, 0.0959742963314056396484375) });

struct main0_out
{
    float FragColor [[color(0)]];
};

struct main0_in
{
    float2 inTexCoord [[user(locn0)]];
};

static inline __attribute__((always_inline))
float3 reconstructPosFromDepth(thread const float4x4& invViewProj, thread const float2& texCoord, thread const float& depth)
{
    float3 posInViewProj = float3((texCoord.x * 2.0) - 1.0, ((1.0 - texCoord.y) * 2.0) - 1.0, depth);
    float4 position = invViewProj * float4(posInViewProj, 1.0);
    float _49 = position.w;
    float4 _50 = position;
    float3 _53 = _50.xyz / float3(_49);
    position.x = _53.x;
    position.y = _53.y;
    position.z = _53.z;
    return position.xyz;
}

fragment main0_out main0(main0_in in [[stage_in]], constant VP& u_vp [[buffer(0)]], texture2d<float> u_depth [[texture(0)]], texture2d<float> u_normalRoughness [[texture(1)]], texture2d<float> u_ssaoNoise [[texture(2)]], sampler u_depthSmplr [[sampler(0)]], sampler u_normalRoughnessSmplr [[sampler(1)]], sampler u_ssaoNoiseSmplr [[sampler(2)]])
{
    main0_out out = {};
    float depth = u_depth.sample(u_depthSmplr, in.inTexCoord).x;
    float4x4 param = u_vp.invViewProj;
    float2 param_1 = in.inTexCoord;
    float param_2 = depth;
    float3 fragPos = (u_vp.view * float4(reconstructPosFromDepth(param, param_1, param_2), 1.0)).xyz;
    float viewZ = fragPos.z;
    float3 normal = fast::normalize(((u_vp.view * float4(u_normalRoughness.sample(u_normalRoughnessSmplr, in.inTexCoord).xyz, 1.0)).xyz * 2.0) - float3(1.0));
    int2 texDim = int2(u_depth.get_width(), u_depth.get_height());
    int2 noiseDim = int2(u_ssaoNoise.get_width(), u_ssaoNoise.get_height());
    float2 noiseUV = float2(float(texDim.x) / float(noiseDim.x), float(texDim.y) / float(noiseDim.y)) * in.inTexCoord;
    float3 randomVec = (u_ssaoNoise.sample(u_ssaoNoiseSmplr, noiseUV).xyz * 2.0) - float3(1.0);
    float3 tangent = fast::normalize(randomVec - (normal * dot(randomVec, normal)));
    float3 bitangent = cross(tangent, normal);
    float3x3 TBN = float3x3(float3(tangent), float3(bitangent), float3(normal));
    float occlusion = 0.0;
    for (int i = 0; i < 24; i++)
    {
        float3 samplePos = TBN * _464[i];
        samplePos = fragPos + (samplePos * 0.4000000059604644775390625);
        float4 offset = u_vp.projection * float4(samplePos, 1.0);
        float _486 = offset.w;
        float4 _487 = offset;
        float2 _490 = _487.xy / float2(_486);
        offset.x = _490.x;
        offset.y = _490.y;
        float4 _495 = offset;
        float2 _500 = (_495.xy * 0.5) + float2(0.5);
        offset.x = _500.x;
        offset.y = _500.y;
        float sampleDepth = u_depth.sample(u_depthSmplr, float2(offset.x, 1.0 - offset.y)).x;
        float4x4 param_3 = u_vp.invViewProj;
        float2 param_4 = float2(offset.x, 1.0 - offset.y);
        float param_5 = sampleDepth;
        float sampleViewZ = (u_vp.view * float4(reconstructPosFromDepth(param_3, param_4, param_5), 1.0)).z;
        float rangeCheck = smoothstep(0.0, 1.0, 0.0199999995529651641845703125 / abs(depth - sampleDepth));
        occlusion += ((viewZ <= (sampleViewZ - 0.039999999105930328369140625)) ? rangeCheck : 0.0);
    }
    out.FragColor = 1.0 - (occlusion / 24.0);
    return out;
}

